--refactor--
-make recap part of day. daily recap of work and fill in the gaps
-overview of flow
-maybe reset tasks each day to remove stale tasks and keep focus clear and incentivise progress
-make it more apparent when no task is active e.g. when you are working but forget to activate a task
--maybe change to a tag system and a description

--ui rework--
-display components based on the redux state, build a state machine for this. or maybe use a router
-move time sizing constants to a separate class and maybe generate them on the fly
-maybe remove hour overlay and use the space on the left for time. Could have the hour every 3 hours

--ab testing--
-create an ab component, that takes two components and will record the flow for that component and user to the db

--backend--
-create firebase functions
-create a function to return the tasks and order them by importance
-create a rule based system to order tasks
-create a weekly cron job to calculate optimal flow times

--flow reporting--
-fix resizing of window
-add shadow dots of previous values for the day, from the dayStat
-maybe also report flow after completing an objective

--prelaunch--
-check security (https://www.youtube.com/watch?v=PUBnlbjZFAI&t=142s)
-test on different devices and web browsers
-test timings
-setup billing
-host it with a good domain name (https://domains.google.com/m/registrar/search/favorites?)
-add start info for first time users
-improve the notification ux
-redesign the dayStats and weekStats
-sort the tasks by length or num objectives or age?
-maybe refactor the scroll to view into displaying a separate popup element

----bugs----
-when changing daystats, it loads an outdated one and gets ride of the second most recent
-daystat progress can get overwritten, maybe sync every hour
-short delay in timer when starting/unpausing task

----non-essential----
-add offline strategy
-test popout app
 (https://medium.com/javascript-in-plain-english/recreating-spotifys-floating-pop-ups-5dd3603aa7f9)
 (https://googlechrome.github.io/samples/picture-in-picture/)
 (https://w3c.github.io/picture-in-picture/#htmlvideoelement-extensions)
-add an install prompt (for pwa) (https://web.dev/customize-install/)

--personal flow coach--
-increase the amount of flow
-assigns and changes what task you are working on based on how you are feeling.
 e.g. if bored maybe change to other task
-add ai to suggest the ordering of tasks - for optimal efficiency and to reduce burnout
-suggest different break based on how you are feeling. e.g. meditation or walk if faitgued

--ai--
-setup firebase ml using a tensorflow lite model
-experiment with using a monte carlo tree search to order the tasks
-add ai autocomplete for task names and suggested duration
-create different user personality bots to train ai e.g. an organised bot, a procrastinator, a long distance, a sprinter
-create a more data driven application for ai, e.g. allow the ai to change break times, notification durations etc
-add tagging of tasks to enable fair comparison of metrics (e.g. you might compete a programming task quicker than a writing one), store tags on user

Flow producing activity are:

app can control:
We are able to concentrate on the activity / Freedom from distractions
The activity has clear goals / Knowing what to do /
The activity has direct feedback / Knowing how well you are doing / Feedback is immediate
We feel that we control the activity
Our worries and concerns disappear

app can't control:
We are up to the activity
Knowing how to do it
High perceived challenges
High perceived skills
A balance exists between opportunity and capacity