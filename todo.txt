--refactor--
-make recap part of day. daily recap of work and fill in the gaps
-overview of flow
-maybe reset tasks each day to remove stale tasks and keep focus clear and incentivise progress
-maybe change to a tag system and a description
-create a production and dev environment https://medium.com/@devesu/how-to-secure-your-firebase-project-even-when-your-api-key-is-publicly-available-a462a2a58843
-standardise time and dates
-maybe refactor redux to use a custom middleware to save stuff to firebase etc? https://redux.js.org/understanding/thinking-in-redux/glossary#middleware
-refactor to use styled components https://styled-components.com/ or maybe just a style var
-tidy the tasks component with compund components
-add a loading indicator when loading tasks
-add objective support for urls

--ui rework--
-display components based on the redux state, build a state machine for this. or maybe use a router
-move time sizing constants to a separate class and maybe generate them on the fly

--ab testing--
-create an ab component, that takes two components and will record the flow for that component and user to the db

--day stat recap--
-add buttons to recap
-add different days
-group sequential short tasks into one large? solve drift due to min task length? shorter min length? no min?
-refactor into taskController, to prevent taskController from not being rendered? Maybe refactor with redux
-refactor to make use of taskNotViewing

--backend--
-setup push notifications https://codelabs.developers.google.com/codelabs/firebase-cloud-functions/#9
-add unit test to load tasks https://firebase.google.com/docs/functions/unit-testing
-create a weekly cron job to calculate optimal flow times

--flow reporting--
-maybe change back to seperate sliders to prevent only using the diagonal

--ab weekly tasks--
-select a daily task for two weeks e.g. drink macha each day
-provides daily reminders for task
-records levels of flow to db
-at the end of the two weeks produce a report to show if flow has increase or decreased and if the task is good for flow

--prelaunch--
- https://firebase.google.com/support/guides/launch-checklist
-check security (https://www.youtube.com/watch?v=PUBnlbjZFAI&t=142s)
-test on different devices and web browsers
-test timings
-host it with a good domain name (https://domains.google.com/m/registrar/search/favorites?)
-add start info for first time users
-improve the notification ux
-secure db access rules and test
-check that saving tasks to firebase can't be optimsed by only sending the changed fields

----bugs----
-daystat progress can get overwritten, maybe sync every hour. May be due to sign out logic?
-as soon as the page loads clicking a task will sometimes unview it shortly after. could be due to loadTasks and double render
-antipattern, selecting another task doesn't show flowreport and same with day recap

----non-essential----
-add offline strategy
-test popout app
 (https://medium.com/javascript-in-plain-english/recreating-spotifys-floating-pop-ups-5dd3603aa7f9)
 (https://googlechrome.github.io/samples/picture-in-picture/)
 (https://w3c.github.io/picture-in-picture/#htmlvideoelement-extensions)
-add an install prompt (for pwa) (https://web.dev/customize-install/)

--personal flow coach--
-increase the amount of flow
-assigns and changes what task you are working on based on how you are feeling.
 e.g. if bored maybe change to other task
-add ai to suggest the ordering of tasks - for optimal efficiency and to reduce burnout
-suggest different break based on how you are feeling. e.g. meditation or walk if faitgued
-plans day based on tasks and adds in non-tasks e.g. lunch a walk etc based on previous data and
 how it thinks it will affect flow

--ai--
-setup firebase ml using a tensorflow lite model
-experiment with using a monte carlo tree search to order the tasks
-add ai autocomplete for task names and suggested duration
-create different user personality bots to train ai e.g. an organised bot, a procrastinator, a long distance, a sprinter
-create a more data driven application for ai, e.g. allow the ai to change break times, notification durations etc
-add tagging of tasks to enable fair comparison of metrics (e.g. you might compete a programming task quicker than a writing one), store tags on user
- https://firebase.google.com/docs/reference/admin/node/admin.machineLearning?authuser=0

Flow producing activity are:

app can control:
We are able to concentrate on the activity / Freedom from distractions
The activity has clear goals / Knowing what to do /
The activity has direct feedback / Knowing how well you are doing / Feedback is immediate
We feel that we control the activity
Our worries and concerns disappear

app can't control:
We are up to the activity
Knowing how to do it
High perceived challenges
High perceived skills
A balance exists between opportunity and capacity